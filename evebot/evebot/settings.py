"""
Django settings for evebot project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import environ
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="django-insecure-vt3s11-u&i4(!xedgwbz06oh5_f4b&!jq@bajq-j2w1n&a83(#",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("ENVIRONMENT", default="development") == "development"

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "evebot.tools"]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://evebot.tools",
]

CORS_ORIGIN_WHITELIST = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://evebot.tools",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "django_celery_results",
    "esi",
    "models",
    "sync",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "evebot.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "evebot.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DB_NAME", default="postgres"),
        "USER": env("DB_USER", default="postgres"),
        "PASSWORD": env("DB_PASSWORD", default="postgres"),
        "HOST": env("DB_HOST", default="localhost"),
        "PORT": env("DB_PORT", default="5432"),
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env("REDIS_URL", default="redis://127.0.0.1:6379/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

USE_X_FORWARDED_HOST = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = env("DJANGO_STATIC_ROOT", default="static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# django-esi settings
ESI_SSO_CLIENT_ID = env("ESI_SSO_CLIENT_ID", default="myclientid")
ESI_SSO_CLIENT_SECRET = env("ESI_SSO_CLIENT_SECRET", default="myclientsecret")
ESI_SSO_CALLBACK_URL = env(
    "ESI_SSO_CALLBACK_URL", default="http://localhost:8000/sso/callback"
)
ESI_USER_CONTACT_EMAIL = env(
    "ESI_USER_CONTACT_EMAIL", default="noreply@development.local"
)
ESI_CONNECTION_POOL_MAXSIZE = env("ESI_CONNECTION_POOL_MAXSIZE", default=25)

# Celery settings
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://127.0.0.1:6379")
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_BACKEND = "django-db"
CELERY_RESULT_EXTENDED = True
CELERY_CACHE_BACKEND = "django-cache"
CELERY_TIMEZONE = "UTC"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# CELERY_IMPORTS = ("sync.runners",)
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BEAT_SCHEDULE = {
    "esi_cleanup_callbackredirect": {
        "task": "esi.tasks.cleanup_callbackredirect",
        "schedule": crontab(hour="*/4"),
    },
    "esi_cleanup_token": {
        "task": "esi.tasks.cleanup_token",
        "schedule": crontab(day_of_month="*/1"),
    },
    # ESI Status Tasks
    "server_status": {
        "task": "sync.tasks.status_status",
        "schedule": crontab(minute="*/1"),
    },
    # ESI Universe Tasks
    "universe_ancestry": {
        "task": "sync.tasks.universe_ancestry",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_astroid_belt": {
        "task": "sync.tasks.universe_astroid_belt",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_bloodline": {
        "task": "sync.tasks.universe_bloodline",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_category": {
        "task": "sync.tasks.universe_category",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_constellation": {
        "task": "sync.tasks.universe_constellation",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_faction": {
        "task": "sync.tasks.universe_faction",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_graphics": {
        "task": "sync.tasks.universe_graphics",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_group": {
        "task": "sync.tasks.universe_group",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_moon": {
        "task": "sync.tasks.universe_moon",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_planet": {
        "task": "sync.tasks.universe_planet",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_race": {
        "task": "sync.tasks.universe_race",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_region": {
        "task": "sync.tasks.universe_region",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_stargate": {
        "task": "sync.tasks.universe_stargate",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_star": {
        "task": "sync.tasks.universe_star",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_station": {
        "task": "sync.tasks.universe_station",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_structure": {
        "task": "sync.tasks.universe_structure",
        "schedule": 3600,
        # TODO: Add realtime queue
    },
    "universe_system": {
        "task": "sync.tasks.universe_system",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
    "universe_system_jumps": {
        "task": "sync.tasks.universe_system_jumps",
        "schedule": 3600,
    },
    "universe_system_kills": {
        "task": "sync.tasks.universe_system_kills",
        "schedule": 3600,
    },
    "universe_type": {
        "task": "sync.tasks.universe_type",
        "schedule": crontab(minute="10", hour="11"),
        "options": {"queue": "background"},
    },
}
